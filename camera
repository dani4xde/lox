<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ö–∞–º–µ—Ä–∞ - –°–µ—Ä–≤–µ—Ä</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #f0f0f0;
        }
        .container {
            max-width: 100%;
            text-align: center;
        }
        video {
            width: 100%;
            max-width: 400px;
            border: 2px solid #333;
            border-radius: 10px;
        }
        button {
            background-color: #4CAF50;
            color: white;
            padding: 15px 25px;
            margin: 10px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }
        button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }
        .status {
            margin: 10px;
            padding: 10px;
            border-radius: 5px;
        }
        .connected {
            background-color: #d4edda;
            color: #155724;
        }
        .disconnected {
            background-color: #f8d7da;
            color: #721c24;
        }
        #streamUrl {
            width: 80%;
            padding: 10px;
            margin: 10px 0;
            border: 1px solid #ddd;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üìπ –°–µ—Ä–≤–µ—Ä –∫–∞–º–µ—Ä—ã</h1>
        
        <div>
            <button id="startCamera">–í–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É</button>
            <button id="startStream" disabled>–ù–∞—á–∞—Ç—å —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é</button>
            <button id="stopStream" disabled>–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é</button>
        </div>
        
        <video id="video" autoplay muted playsinline></video>
        
        <div class="status disconnected" id="status">
            –°—Ç–∞—Ç—É—Å: –ù–µ–∞–∫—Ç–∏–≤–Ω–æ
        </div>
        
        <div id="connectionInfo" style="display: none;">
            <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</h3>
            <input type="text" id="streamUrl" readonly>
            <button onclick="copyUrl()">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É</button>
            <p><strong>–í–∞—à IP:</strong> <span id="ipAddress"></span></p>
        </div>
    </div>

    <script>
        let videoStream = null;
        let peerConnection = null;
        let dataChannel = null;
        const configuration = {
            iceServers: [
                { urls: 'stun:stun.l.google.com:19302' },
                { urls: 'stun:stun1.l.google.com:19302' }
            ]
        };

        const video = document.getElementById('video');
        const startCameraBtn = document.getElementById('startCamera');
        const startStreamBtn = document.getElementById('startStream');
        const stopStreamBtn = document.getElementById('stopStream');
        const statusDiv = document.getElementById('status');
        const connectionInfo = document.getElementById('connectionInfo');
        const streamUrl = document.getElementById('streamUrl');
        const ipAddress = document.getElementById('ipAddress');

        // –ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞
        async function getIPAddress() {
            try {
                const response = await fetch('https://api.ipify.org?format=json');
                const data = await response.json();
                return data.ip;
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP:', error);
                return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            }
        }

        // –í–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
        startCameraBtn.addEventListener('click', async () => {
            try {
                videoStream = await navigator.mediaDevices.getUserMedia({ 
                    video: { facingMode: 'environment', width: 1280, height: 720 },
                    audio: false 
                });
                video.srcObject = videoStream;
                startStreamBtn.disabled = false;
                startCameraBtn.disabled = true;
                updateStatus('–ö–∞–º–µ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞', 'connected');
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ:', error);
                updateStatus('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ', 'disconnected');
            }
        });

        // –ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
        startStreamBtn.addEventListener('click', async () => {
            try {
                await startWebRTCStreaming();
                startStreamBtn.disabled = true;
                stopStreamBtn.disabled = false;
                
                // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                const ip = await getIPAddress();
                ipAddress.textContent = ip;
                const currentUrl = window.location.href.replace('camera.html', 'viewer.html');
                streamUrl.value = currentUrl;
                connectionInfo.style.display = 'block';
                
                updateStatus('–¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞', 'connected');
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏:', error);
                updateStatus('–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏', 'disconnected');
            }
        });

        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
        stopStreamBtn.addEventListener('click', () => {
            stopStreaming();
            startStreamBtn.disabled = false;
            stopStreamBtn.disabled = true;
            connectionInfo.style.display = 'none';
            updateStatus('–¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', 'disconnected');
        });

        function updateStatus(message, type) {
            statusDiv.textContent = `–°—Ç–∞—Ç—É—Å: ${message}`;
            statusDiv.className = `status ${type}`;
        }

        function copyUrl() {
            streamUrl.select();
            document.execCommand('copy');
            alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
        }

        // WebRTC –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
        async function startWebRTCStreaming() {
            peerConnection = new RTCPeerConnection(configuration);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫
            videoStream.getTracks().forEach(track => {
                peerConnection.addTrack(track, videoStream);
            });

            // –°–æ–∑–¥–∞–µ–º offer
            const offer = await peerConnection.createOffer();
            await peerConnection.setLocalDescription(offer);

            // –ó–¥–µ—Å—å –æ–±—ã—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è offer —á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
            // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
            localStorage.setItem('webrtcOffer', JSON.stringify(offer));
        }

        function stopStreaming() {
            if (peerConnection) {
                peerConnection.close();
                peerConnection = null;
            }
            if (videoStream) {
                videoStream.getTracks().forEach(track => track.stop());
            }
            localStorage.removeItem('webrtcOffer');
        }

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.addEventListener('beforeunload', stopStreaming);
    </script>
</body>
</html>
